Description: >
    An example Python service deployed behind a load balancer.

Parameters: 

    Cluster:
        Description: Please provide the ECS Cluster ID that this service should run on
        Type: String

    DesiredCount: 
        Description: How many instances of this task should we run across our cluster?
        Type: Number
        Default: 2

    ExecutionRole:
        Description: >
            Please provide the Task Execution Role which will be used to pull container
            images from Amazon ECR and to push logs into CloudWatch Logs
        Type: String

    LoadBalancer:
        Description: Please provide the name of the load balancer to use
        Type: String

    Listener:
        Description: The Application Load Balancer listener to register with
        Type: String

    PrivateDnsNamespace:
        Description: Please provide the Private DNS namespace to use for service discovery
        Type: String

    SecurityGroups:
        Description: Please provide a list of security groups for your tasks
        Type: String

    Subnet1:
        Description: Please provide the first subnet in which your tasks will run
        Type: String

    Subnet2:
        Description: Please provide the second subnet in which your tasks will run
        Type: String

    VPC:
        Description: The VPC that the ECS cluster is deployed to
        Type: AWS::EC2::VPC::Id
        
Resources:

    CloudWatchLogsGroup:
        Type: AWS::Logs::LogGroup
        Properties: 
            LogGroupName: !Ref AWS::StackName
            RetentionInDays: 365

    ListenerRule:
        Type: AWS::ElasticLoadBalancingV2::ListenerRule
        Properties:
            ListenerArn: !Ref Listener
            Priority: 2
            Conditions:
                - Field: path-pattern
                  Values: 
                    - /*
            Actions:
                - TargetGroupArn: !Ref TargetGroup
                  Type: forward

    Service:
        Type: AWS::ECS::Service
        Properties: 
            Cluster: !Ref Cluster
            DesiredCount: !Ref DesiredCount
            LaunchType: FARGATE
            LoadBalancers:
                - ContainerName: flask-backend
                  ContainerPort: 5000
                  TargetGroupArn: !Ref TargetGroup
            NetworkConfiguration:
                AwsvpcConfiguration:
                    SecurityGroups:
                        - !Ref SecurityGroups
                    Subnets:
                        - !Ref Subnet1
                        - !Ref Subnet2
            ServiceRegistries:
              - RegistryArn: !GetAtt ServiceDiscoveryService.Arn
            TaskDefinition: !Ref TaskDefinition

    ServiceDiscoveryService:
        Type: AWS::ServiceDiscovery::Service
        Properties:
            DnsConfig:
                DnsRecords:
                  - Type: A
                    TTL: 10
                NamespaceId: !Ref PrivateDnsNamespace
            HealthCheckCustomConfig:
                FailureThreshold: 1
            Name: backend

    TargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
            HealthCheckIntervalSeconds: 10
            HealthCheckPath: /ping
            HealthCheckProtocol: HTTP
            HealthCheckTimeoutSeconds: 5
            HealthyThresholdCount: 2
            Matcher: 
                HttpCode: 200
            Name: flask-backend
            Port: 5000
            Protocol: HTTP
            TargetType: ip
            UnhealthyThresholdCount: 3
            VpcId: !Ref VPC

    TaskDefinition:
        Type: AWS::ECS::TaskDefinition
        Properties:
            ContainerDefinitions:
                - Name: flask-backend
                  Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/flask-backend:latest
                  PortMappings:
                    - ContainerPort: 5000
                  LogConfiguration:
                    LogDriver: awslogs
                    Options:
                        awslogs-group: !Ref AWS::StackName
                        awslogs-region: !Ref AWS::Region
                        awslogs-stream-prefix: "ecs"
            Cpu: 512
            ExecutionRoleArn: !Ref ExecutionRole
            Family: flask-backend
            NetworkMode: awsvpc
            Memory: 1024
            RequiresCompatibilities:
              - FARGATE
            TaskRoleArn: !GetAtt TaskRole.Arn

    TaskRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument: |
                {
                    "Statement": [{
                        "Action": "sts:AssumeRole",
                        "Effect": "Allow",
                        "Principal": {
                            "Service": "ecs-tasks.amazonaws.com"
                        }
                    }]
                }
            Policies:
                - PolicyName: flask-backend-task-policy
                  PolicyDocument: |
                    {
                        "Statement": [{
                            "Effect": "Allow",
                            "Action": [
                                "servicediscovery:ListServices",
                                "servicediscovery:ListInstances",
                                "servicediscovery:ListNamespaces"
                            ],
                            "Resource": "*"
                        }]
                    }